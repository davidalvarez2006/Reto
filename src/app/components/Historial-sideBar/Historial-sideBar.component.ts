import { Component, Output, EventEmitter } from '@angular/core';
import { ChatServiceHistorial, Conversation, Message } from '../../services/chatSave-service.service';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-sidebar',
  templateUrl: './Historial-sideBar.component.html',
  styleUrls: ['./Historial-sideBar.component.css'],
  imports: [CommonModule, FormsModule],
})
export class SidebarComponent {
  newChatTitle: string = '';  // Propiedad para almacenar el t√≠tulo del nuevo chat
  conversations$;

  @Output() selectedConversation = new EventEmitter<{ texto: string; tipo: 'usuario' | 'bot' }[]>(); // üîπ Agregamos el Output

  constructor(private chatService: ChatServiceHistorial) {
    this.conversations$ = this.chatService.conversations$;
  }

  openConversation(id: number) {
    const conversation = this.chatService.getConversationById(id);
    if (conversation) {
      this.selectedConversation.emit(conversation.messages); // üîπ Emitimos los mensajes al chat
    }
  }

  // Funci√≥n para crear un nuevo chat con un t√≠tulo personalizado
  createNewConversation() {
    if (this.newChatTitle.trim() !== '') { // Aseguramos que el t√≠tulo no est√© vac√≠o
      const newMessages: Message[] = []; // Inicializa la lista de mensajes vac√≠a
      const newId = this.chatService.addConversation(this.newChatTitle, newMessages); // Crea y agrega la nueva conversaci√≥n con el t√≠tulo dado
      this.openConversation(newId); // Abre la conversaci√≥n reci√©n creada
      this.newChatTitle = ''; // Limpia el campo de entrada despu√©s de crear el chat
    } else {
      alert('Por favor, ingresa un t√≠tulo para la nueva conversaci√≥n.');
    }
  }

  deleteConversation(id: number): void {
    this.chatService.deleteConversation(id);
  }

  clearHistory() {
    this.chatService.clearConversations(); // üîπ Llama al servicio para limpiar las conversaciones
  }
}
